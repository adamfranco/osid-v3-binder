<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>

<!--
    XOSID for osid.filing generated at 7/16/2008 11:03:17 AM 

    Copyright (C) 2008 Massachusetts Institute of Technology. All Rights
    Reserved.

    This Work is being provided by the copyright holder(s) subject to the
    following license. By obtaining, using and/or copying this Work, you
    agree that you have read, understand, and will comply with the following
    terms and conditions.

    This Work and the information contained herein is provided on an "AS IS"
    basis. The Massachusetts Institute of Technology, the Open Knowledge
    Initiative, and THE AUTHORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
    INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR
    A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
    IN THE WORK.

    Permission to use, copy and distribute unmodified versions of this Work,
    for any purpose, without fee or royalty is hereby granted, provided that
    you include the above copyright notice and the terms of this license on
    ALL copies of the Work or portions thereof. 

    You may nodify or create Derivatives of this Work only for your internal
    purposes. You shall not distribute or transfer any such Derivative of
    this Work to any location or to any third party. For the purposes of
    this license, Derivative shall mean any derivative of the Work as
    defined in the United States Copyright Act of 1976, such as a
    translation or modification.

    The export of software employing encryption technology may require a
    specific license from the United States Government. It is the
    responsibility of any person or organization comtemplating export to
    obtain such a license before exporting this Work.
-->

<xosid:osid xmlns:xosid="urn:inet:osid.org:schemas/osid/3" xosid:name="osid.filing" xosid:version="3.0.0">

    <xosid:title>
        Filing Open Service Interface Definitions
    </xosid:title>

    <xosid:copyright>
        Copyright <xosid:copyrightSymbol/>2008 Massachusetts Institute
        of Technology. All Rights Reserved.
    </xosid:copyright>

    <xosid:license>
        This Work is being provided by the copyright holder(s) subject
        to the following license. By obtaining, using and/or copying
        this Work, you agree that you have read, understand, and will
        comply with the following terms and conditions.

        <xosid:pbreak/>

        This Work and the information contained herein is provided on
        an "AS IS" basis. The Massachusetts Institute of Technology,
        the Open Knowledge Initiative, and THE AUTHORS DISCLAIM ALL
        WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
        WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
        AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
        HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
        WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        FROM, OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER
        DEALINGS IN THE WORK.

        <xosid:pbreak/>

        Permission to use, copy and distribute unmodified versions of
        this Work, for any purpose, without fee or royalty is hereby
        granted, provided that you include the above copyright notice
        and the terms of this license on ALL copies of the Work or
        portions thereof. 

        <xosid:pbreak/>

        You may nodify or create Derivatives of this Work only for your
        internal purposes. You shall not distribute or transfer any
        such Derivative of this Work to any location or to any third
        party. For the purposes of this license, Derivative shall mean
        any derivative of the Work as defined in the United States
        Copyright Act of 1976, such as a translation or modification.

        <xosid:pbreak/>

        The export of software employing encryption technology may
        require a specific license from the United States Government.
        It is the responsibility of any person or organization
        comtemplating export to obtain such a license before exporting
        this Work.
    </xosid:license>

    <xosid:description>
        The Filing OSID provides a means for managing and accessing
        files and directories. The Filing OSID is used to abstract
        assumptions made about using a specific file system, or can be
        used to provide a file-based application a file system oriented
        view of other OSIDs.

        <xosid:pbreak/>

        The Filing OSID defines a file access session that maps to a
        single file. This is the simplest application of the Filing
        OSID can be used in circumstances when it is desirable to
        confine knowledge of a particular path within a provider. In
        visible federation, the consumer may select a file based on a
        given path name.

        <xosid:pbreak/>

        Unlike the other OSIDs, the identity of a file is based on a
        path string rather than an <xosid:token>Id.</xosid:token> The
        path name serves as a unique identifier. Files also have a name
        which is used as an identifier with respect to a specific
        directory. Generally, the name is the last component of the
        path but the OSIDs don't specify a particular relationship
        between the file name and its absolute path.
        The Filing OSID differs from common file system APIs in its
        separate treatment of files and directories. An application may
        access a single file, or query for all files and subdirectories
        within a given directory. Directory browsing is performed
        through the <xosid:token>DirectoryEntryLookupSession.
        </xosid:token>To browse a different directory, a new loookup
        session is spawned.

        <xosid:pbreak/>

        <xosid:token>Files</xosid:token> and
        <xosid:token>Directories</xosid:token> are not OSID Objects
        although some of their characteristics are inherited from the
        general OSID Object pattern. The Filing OSID site somewhere
        between a generic transport or persistence service and a more
        structured OSID object. As such,
        <xosid:token>Files</xosid:token> and
        <xosid:token>Directories</xosid:token> also do not have
        extensible interfaces or <xosid:token>Types.</xosid:token>
        Corresponding metadata can be handled in sidecar files and
        incorporated into a higher level interface such as
        <xosid:token>Asset.</xosid:token>
        <xosid:token>Files</xosid:token> and
        <xosid:token>Directories</xosid:token> may support searches and
        notifications in a similar pattern to the higher level OSIDs.
        However, the hierarchy in the Filing service is implicit
        involving a navigation of parent/child relationships from
        within the <xosid:token>Directory.</xosid:token> The hierarchy
        is also restricted to having single parents under a single root.

        <xosid:pbreak/>

        Sessions are organized into operations on a single file,
        operations within a single directory, and operations across
        directories. Since provider boundaries will generally
        correspond to directory nodes, it is desirable to contain
        authentication and state management within a single session for
        most common operations. 

        <xosid:pbreak/>

        The naming of the parameters include:

        <xosid:pbreak/>

        <xosid:outline>
             <xosid:element>
                name: name of a file or directory without the path component
            </xosid:element>
             <xosid:element>
                path: absolute or relative path of the filr or
                directory including the name component
            </xosid:element>
             <xosid:element>
                absolute path: absolute path from the root including
                the name component
            </xosid:element>
        </xosid:outline>
         
        Basic exmple:

        <xosid:pbreak/>

         <xosid:code>

FilieSession session = filingManager.getFileSession();
if (session.canReadFile()) {
    DataInputStream dis = session.getInputStream();
}

        </xosid:code>
         
        <xosid:pbreak/>

        Or, the session may support direct access to specified files.

        <xosid:pbreak/>

         <xosid:code>
FileSession session filingSession.getFileSessionForPath("/etc/osid/config.txt");
        </xosid:code>
         
    </xosid:description>


    <xosid:interface xosid:name="osid.filing.FilingProfile"> 
        <xosid:implements xosid:interface="osid.OsidProfile"/>
        <xosid:description>
            The filing profile describes the interoperability among
            filing services.
        </xosid:description>


        <xosid:method xosid:name="supportsVisibleFederation">
            <xosid:description>
                Tests if any dictionary federation is exposed.
                Federation is exposed when a specific dictionary may be
                identified, selected and used to create a lookup or
                admin session. Federation is not exposed when a set of
                dictionaries appears as a single dictionary.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if federation is
                    visible <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsFiles">
            <xosid:description>
                Tests if a <xosid:token>FileSession</xosid:token> is
                supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>FilingSession</xosid:token> is
                    available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsFileSearch">
            <xosid:description>
                Tests if file searching is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>FilingSearchSession</xosid:token> is
                    available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsFileNotification">
            <xosid:description>
                Tests if file notification is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                   
                    <xosid:token>FilingNotificationSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectoryEntryLookup">
            <xosid:description>
                Tests if a
                <xosid:token>DirectoryEntryLookupSession</xosid:token>
                is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                   
                    <xosid:token>DirectoryEntryLookupSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectorySearch">
            <xosid:description>
                Tests if directory searching is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>DirectorySearchSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectoryAdmin">
            <xosid:description>
                Tests if directory administration is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>DirectoryAdminSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectoryNotification">
            <xosid:description>
                Tests if a directory<xosid:token>
                </xosid:token>notification service is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                   
                    <xosid:token>DirectoryNotificationSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsFilingManagement">
            <xosid:description>
                Tests if a file management service is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>FileManagementSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsAllocation">
            <xosid:description>
                Tests if filing allocation is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>AllocationSession</xosid:token> is
                    available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsAllocationAdmin">
            <xosid:description>
                Tests if quota administration is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                    <xosid:token>AllocationAdminSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsAllocationNotification">
            <xosid:description>
                Tests if an allocation<xosid:token>
                </xosid:token>notification service is supported.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a
                   
                    <xosid:token>AllocationNotificationSession</xosid:token>
                    is available, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchInterfaceTypes">
            <xosid:description>
                Gets the supported file search interface types.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.TypeList"/>
                <xosid:description>
                    a list containing the supported
                    <xosid:token>File</xosid:token> search interface
                    types
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsFileSearchInterfaceType">
            <xosid:description>
                Tests if the given file search interface type is
                supported.
            </xosid:description>
            <xosid:parameter xosid:name="fileSearchInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a <xosid:token>Type</xosid:token> indicating a file
                    search interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the given search
                    interface <xosid:token>Type</xosid:token> is
                    supported, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchInterfaceTypes">
            <xosid:description>
                Gets the supported directory search interface types.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.TypeList"/>
                <xosid:description>
                    a list containing the supported
                    <xosid:token>Directory</xosid:token> search
                    interface types
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectorySearchInterfaceType">
            <xosid:description>
                Tests if the given directory search interface type is
                supported.
            </xosid:description>
            <xosid:parameter xosid:name="directorySearchInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a <xosid:token>Type</xosid:token> indicating a
                    directory search interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the given search
                    interface <xosid:token>Type</xosid:token> is
                    supported, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FilingManager"> 
        <xosid:implements xosid:interface="osid.OsidManager"/>
        <xosid:implements xosid:interface="osid.filing.FilingProfile"/>
        <xosid:description>
            The filing manager provides access sessions to retrieve and
            manage files and directories. A manager may support
            federation in that files and directories can be accessed by
            a specified path. The sessions included in this manager
            are:
            <xosid:outline>
                 <xosid:element>
                    <xosid:token>FileSession:</xosid:token> a basic
                    session for reading and writing a file
                </xosid:element>
                 <xosid:element>
                    <xosid:token>FileSearchSession:</xosid:token> a
                    session for searching for files
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>FileNotificationSession:</xosid:token>
                    a session for subscribing to changes in files
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>DirectoryEntryLookupSession:</xosid:token>
                    a session for examining the contents of a directory
                </xosid:element>
                 <xosid:element>
                    <xosid:token>DirectorySearchSession:</xosid:token>
                    a session for searching for directories
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>DirectoryNotificationSession:</xosid:token>
                    a session for subscribing to changes in directories
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>FilingManagementSession:</xosid:token>
                    a session for performing operations across directories
                </xosid:element>
                 <xosid:element>
                    <xosid:token>AllocationSession:</xosid:token> a
                    session for accessing usage information and quotas
                </xosid:element>
                 <xosid:element>
                    <xosid:token>AllocationAdminSession</xosid:token> a
                    session for assigning quotas
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>AllocationNotificationSession:</xosid:token>
                    a session for subscribing to usage warnings and
                    quota changes
                </xosid:element>
            </xosid:outline>
             
        </xosid:description>


        <xosid:method xosid:name="getFileSession">
            <xosid:description>
                Gets the session for manipulating files.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSession"/>
                <xosid:description>
                    the <xosid:token>FileSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSessionForPath">
            <xosid:description>
                Gets the session for manipulating files for the given
                path. If a path represents an alias, the target file is
                accessed. The path will indicate the path to the alias
                and the real path will indicate the path to the target
                file.
            </xosid:description>
            <xosid:parameter xosid:name="filePath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the file
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSession"/>
                <xosid:description>
                    a <xosid:token>FileSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> is not a file
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFiles()</xosid:token> and
                   
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchSession">
            <xosid:description>
                Gets the session for searching for files.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchSession"/>
                <xosid:description>
                    the <xosid:token>FileSessionSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchSessionForDirectory">
            <xosid:description>
                Gets a file search session for the specified directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchSession"/>
                <xosid:description>
                    a <xosid:token>FileSearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileSearch()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to files.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.FileReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileNotificationSession"/>
                <xosid:description>
                    <xosid:token>a
                    FileNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileNotificationSessionForDirectory">
            <xosid:description>
                Gets a file notification session for the specified
                directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.FileReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>FileNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> or
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFileNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryEntryLookupSession">
            <xosid:description>
                Gets the session for examining directories.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryEntryLookupSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryEntryLookupSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryEntryLookupSessionForDirectory">
            <xosid:description>
                Gets the session for examining a given directory. If
                the path is an alias, the target directory is used. The
                path indicates the file alias and the real path
                indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryEntryLookupSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryEntryLookupSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchSession">
            <xosid:description>
                Gets the session for searching for directories.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchSession"/>
                <xosid:description>
                    a <xosid:token>DirectorySearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchSessionForDirectory">
            <xosid:description>
                Gets the session for searching for directories within a
                given directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchSession"/>
                <xosid:description>
                    a <xosid:token>DirectorySearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectorySearch()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryAdminSession">
            <xosid:description>
                Gets the session for creating and removing files.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryAdminSession"/>
                <xosid:description>
                    a <xosid:token>DirectoryAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryAdminSessionForDirectory">
            <xosid:description>
                Gets the session for searching for creating and
                removing files in the given directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryAdminSession"/>
                <xosid:description>
                    a <xosid:token>DirectoryAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryNotificationSessionForDirectory">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories in the given directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> or
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilingManagementSession">
            <xosid:description>
                Gets a session for manipulating entries across
                directories.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FilingManagementSession"/>
                <xosid:description>
                    a
                    <xosid:token>FilingManagementSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileManagementSessionForDirectory">
            <xosid:description>
                Gets the session for manipulating entries using the
                given director as the current directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FilingManagementSession"/>
                <xosid:description>
                    a
                    <xosid:token>FilingManagementSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFilingManagement()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationSession">
            <xosid:description>
                Gets the session for accessing usage and quotas.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationSession"/>
                <xosid:description>
                    an <xosid:token>AllocationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationSessionForDirectory">
            <xosid:description>
                Gets the session for accessing usage and quotas for a
                given directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationSession"/>
                <xosid:description>
                    an <xosid:token>AllocationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAllocation()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationAdminSession">
            <xosid:description>
                Gets the session for assigning quotas.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationAdminSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationAdminSessionForDirectory">
            <xosid:description>
                Gets the session for assigning quotas for the given
                directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationAdminSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationAdmin()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.AllocationReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationNotificationSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationNotificationSessionForDirectory">
            <xosid:description>
                Gets the session for receiving messages about usage
                warnings and quota changes for the given directory. If
                the path is an alias, the target directory is used. The
                path indicates the file alias and the real path
                indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.AllocationReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationNotificationSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> or
                    <xosid:token>directoryPath</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FilingProxyManager"> 
        <xosid:implements xosid:interface="osid.OsidProxyManager"/>
        <xosid:implements xosid:interface="osid.filing.FilingProfile"/>
        <xosid:description>
            The filing manager provides access sessions to retrieve and
            manage files and directories. A manager may support
            federation in that files and directories can be accessed by
            a specified path. Methods in this manager support the
            passing of an Authentication object for the purposes of
            proxy authentication. The sessions included in this manager
            are:
            <xosid:outline>
                 <xosid:element>
                    <xosid:token>FileSession:</xosid:token> a basic
                    session for reading and writing a file
                </xosid:element>
                 <xosid:element>
                    <xosid:token>FileSearchSession:</xosid:token> a
                    session for searching for files
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>FileNotificationSession:</xosid:token>
                    a session for subscribing to changes in files
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>DirectoryEntryLookupSession:</xosid:token>
                    a session for examining the contents of a directory
                </xosid:element>
                 <xosid:element>
                    <xosid:token>DirectorySearchSession:</xosid:token>
                    a session for searching for directories
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>DirectoryNotificationSession:</xosid:token>
                    a session for subscribing to changes in directories
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>FilingManagementSession:</xosid:token>
                    a session for performing operations across directories
                </xosid:element>
                 <xosid:element>
                    <xosid:token>AllocationSession:</xosid:token> a
                    session for accessing usage information and quotas
                </xosid:element>
                 <xosid:element>
                    <xosid:token>AllocationAdminSession</xosid:token> a
                    session for assigning quotas
                </xosid:element>
                 <xosid:element>

                                        <xosid:token>AllocationNotificationSession:</xosid:token>
                    a session for subscribing to usage warnings and
                    quota changes
                </xosid:element>
            </xosid:outline>
             
        </xosid:description>


        <xosid:method xosid:name="getFileSession">
            <xosid:description>
                Gets the session for manipulating files.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSession"/>
                <xosid:description>
                    the <xosid:token>FileSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSessionForPath">
            <xosid:description>
                Gets the session for manipulating files for the given
                path. If a path represents an alias, the target file is
                accessed. The path will indicate the path to the alias
                and the real path will indicate the path to the target
                file.
            </xosid:description>
            <xosid:parameter xosid:name="filePath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the file
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSession"/>
                <xosid:description>
                    a <xosid:token>FileSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> is not a file
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>filePath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFiles()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFiles()</xosid:token> and
                   
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchSession">
            <xosid:description>
                Gets the session for searching for files.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchSession"/>
                <xosid:description>
                    the <xosid:token>FileSessionSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchSessionForDirectory">
            <xosid:description>
                Gets a file search session for the specified directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchSession"/>
                <xosid:description>
                    a <xosid:token>FileSearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFileSearch()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileSearch()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to files.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.FileReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileNotificationSession"/>
                <xosid:description>
                    <xosid:token>a
                    FileNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> or
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileNotificationSessionForDirectory">
            <xosid:description>
                Gets a file notification session for the specified
                directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.FileReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>FileNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver, directoryPath</xosid:token>
                    or <xosid:token>authentication</xosid:token> is
                    null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFileNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFileNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryEntryLookupSession">
            <xosid:description>
                Gets the session for examining directories.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryEntryLookupSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryEntryLookupSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryEntryLookupSessionForDirectory">
            <xosid:description>
                Gets the session for examining a given directory. If
                the path is an alias, the target directory is used. The
                path indicates the file alias and the real path
                indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryEntryLookupSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryEntryLookupSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryEntryLookup()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchSession">
            <xosid:description>
                Gets the session for searching for directories.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchSession"/>
                <xosid:description>
                    a <xosid:token>DirectorySearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchSessionForDirectory">
            <xosid:description>
                Gets the session for searching for directories within a
                given directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchSession"/>
                <xosid:description>
                    a <xosid:token>DirectorySearchSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectorySearch()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectorySearch()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryAdminSession">
            <xosid:description>
                Gets the session for creating and removing files.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryAdminSession"/>
                <xosid:description>
                    a <xosid:token>DirectoryAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryAdminSessionForDirectory">
            <xosid:description>
                Gets the session for searching for creating and
                removing files in the given directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryAdminSession"/>
                <xosid:description>
                    a <xosid:token>DirectoryAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryAdmin()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver</xosid:token> or
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryNotificationSessionForDirectory">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories in the given directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryNotificationSession"/>
                <xosid:description>
                    a
                    <xosid:token>DirectoryNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver, directoryPath</xosid:token>
                    or <xosid:token>authentication</xosid:token> is
                    null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilingManagementSession">
            <xosid:description>
                Gets a session for manipulating entries across
                directories.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FilingManagementSession"/>
                <xosid:description>
                    a
                    <xosid:token>FilingManagementSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileManagementSessionForDirectory">
            <xosid:description>
                Gets the session for manipulating entries using the
                given director as the current directory. If the path is
                an alias, the target directory is used. The path
                indicates the file alias and the real path indicates
                the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FilingManagementSession"/>
                <xosid:description>
                    a
                    <xosid:token>FilingManagementSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsFilingManagement()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsFilingManagement()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationSession">
            <xosid:description>
                Gets the session for accessing usage and quotas.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationSession"/>
                <xosid:description>
                    an <xosid:token>AllocationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationSessionForDirectory">
            <xosid:description>
                Gets the session for accessing usage and quotas for a
                given directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationSession"/>
                <xosid:description>
                    an <xosid:token>AllocationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAllocation()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAllocation()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationAdminSession">
            <xosid:description>
                Gets the session for assigning quotas.
            </xosid:description>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationAdminSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationAdminSessionForDirectory">
            <xosid:description>
                Gets the session for assigning quotas for the given
                directory. If the path is an alias, the target
                directory is used. The path indicates the file alias
                and the real path indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationAdminSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationAdminSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> or
                    <xosid:token>authentication</xosid:token> is null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationAdmin()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationAdmin()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationNotificationSession">
            <xosid:description>
                Gets the session for receiving messages about changes
                to directories.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.AllocationReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationNotificationSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>authentication</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryNotification()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocationNotificationSessionForDirectory">
            <xosid:description>
                Gets the session for receiving messages about usage
                warnings and quota changes for the given directory. If
                the path is an alias, the target directory is used. The
                path indicates the file alias and the real path
                indicates the target directory.
            </xosid:description>
            <xosid:parameter xosid:name="receiver">
                <xosid:interfaceType xosid:type="osid.filing.AllocationReceiver"/>
                <xosid:description>
                    the notification callback
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="authentication">
                <xosid:interfaceType xosid:type="osid.authentication.Authentication"/>
                <xosid:description>
                    proxy authentication
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.AllocationNotificationSession"/>
                <xosid:description>
                    an
                    <xosid:token>AllocationNotificationSession</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not a
                    directory or an alias to a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>directoryPath</xosid:token> is not
                    found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>receiver, directoryPath</xosid:token>
                    or <xosid:token>authentication</xosid:token> is
                    null
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    a<xosid:token>uthentication</xosid:token> is
                    invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsAllocationNotification()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    the <xosid:token>authentication</xosid:token>
                    service is not supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsAllocationNotification()</xosid:token>
                    and
                    <xosid:token>supportsVisibleFederation()</xosid:token>
                    are <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session is for reading and writing the file associated
            with this session.
        </xosid:description>


        <xosid:method xosid:name="getFilePath">
            <xosid:description>
                Gets the absolute path of this file.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this file
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFile">
            <xosid:description>
                Gets the file associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File"/>
                <xosid:description>
                    the file associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canReadFile">
            <xosid:description>
                Tests if this user can access this file. A return of
                true does not guarantee successful authorization. A
                return of false indicates that it is known accessing
                this file will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may not wish
                to offer read operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if file access is
                    not authorized, <xosid:token>true</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getInputStream">
            <xosid:description>
                Gets the input stream for reading this file. The input
                stream reads until the end of the file.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.transport.DataInputStream"/>
                <xosid:description>
                    the input stream for reading this file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getBlockingInputStream">
            <xosid:description>
                Gets the input stream for reading this file. The
                returned input stream, once it reaches the end of the
                file, blocks for new content that may be later appended
                to the file.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.transport.DataInputStream"/>
                <xosid:description>
                    the input stream for reading this file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canWriteFile">
            <xosid:description>
                Tests if this user can update this file. A return of
                true does not guarantee successful authorization. A
                return of false indicates that it is known writing to
                this this file will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may not wish
                to offer write operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if file write is
                    not authorized, <xosid:token>true</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getOutputStream">
            <xosid:description>
                Gets an output stream for writing to this file,
                replacing any existing contents.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.transport.DataOutputStream"/>
                <xosid:description>
                    the output stream for writing to this file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getOutputStreamForAppend">
            <xosid:description>
                Gets an output stream for appending to this file.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.transport.DataOutputStream"/>
                <xosid:description>
                    the output stream for appending to this file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="touch">
            <xosid:description>
                Updates the modified time of a file to be the current
                time.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileSearchSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session provides methods for searching among files and
            directories objects. The search query is constructed using
            the <xosid:token>FileQuery</xosid:token> and
            <xosid:token>DirectoryQuery</xosid:token> interfaces.
            Multiple query interfaces may be submitted into a search to
            perform a boolean <xosid:token>OR.</xosid:token> If more
            than one search element is specified within a single
            <xosid:token>FileQuery</xosid:token> these elements form a
            boolean AND.

            <xosid:pbreak/>

            <xosid:token>getFilesByQuery()</xosid:token> is the basic
            search method and returns a list of
            <xosid:token>Files.</xosid:token> A more advanced search
            may be performed with
            <xosid:token>getFilesBySearch().</xosid:token> It accepts a
            <xosid:token>FileSearch</xosid:token> interface in
            addition to the query interface for the purpose of
            specifying additional options affecting the entire search,
            such as ordering.
            <xosid:token>getFilesBySearch()</xosid:token> returns an
            <xosid:token>FileSearchResults</xosid:token> interface
            that can be used to access the resulting
            <xosid:token>FileList</xosid:token> or be used to perform
            a search within the result set through <xosid:token>FileSearch.</xosid:token>

            <xosid:pbreak/>

            This session defines views that offer differing behaviors
            when retrieving multiple objects.

            <xosid:pbreak/>

            <xosid:outline>
                 <xosid:element>
                    federated directory view: searches include entries
                    in directories of which this directory is a
                    ancestor 
                </xosid:element>
                 <xosid:element>
                    isolated directory view: searches are restricted
                    this directory only
                </xosid:element>
            </xosid:outline>
             
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canSearchFiles">
            <xosid:description>
                Tests if this user can perform
                <xosid:token>File</xosid:token> searches. A return of
                true does not guarantee successful authorization. A
                return of false indicates that it is known all methods
                in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer search operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if lookup methods
                    are not authorized, <xosid:token>true</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useFederatedDirectoryView">
            <xosid:description>
                Federates the view for methods in this session. A
                federated view will include entries in directories
                which are children of this directory.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useIsolatedDirectoryView">
            <xosid:description>
                Isolates the view for methods in this session. An
                isolated view restricts lookups to this directory only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileQuery">
            <xosid:description>
                Gets a file query interface. The returned query only
                makes available the core
                <xosid:token>FileQuery</xosid:token> interface and does
                not support additional interface types.
               
                <xosid:token>getFileQueryForInterfaceType()</xosid:token>
                should be used if additional interface types are
                required.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileQuery"/>
                <xosid:description>
                    the file query
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileQueryForInterfaceType">
            <xosid:description>
                Gets a file query interface of the specified type. The
                returned query contains the method to access the query
                interface corresponding to the specified
                <xosid:token>Type </xosid:token>but must not be cast
                directly from this method return.
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the type of query interface to retrieve
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileQuery"/>
                <xosid:description>
                    the file query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsFileInterfaceType()</xosid:token>
                   is <xosid:token> false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesByQuery">
            <xosid:description>
                Gets a list of <xosid:token>Files</xosid:token>
                matching the given search interface. Each element in
                the array is OR'd.
            </xosid:description>
            <xosid:parameter xosid:name="fileQueries">
                <xosid:interfaceType xosid:type="osid.filing.FileQuery" xosid:array="true"/>
                <xosid:description>
                    the search query array
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the returned <xosid:token>FileList</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileQueries</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    a <xosid:token>fileQuery</xosid:token> is not of
                    this service
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearch">
            <xosid:description>
                Gets a file search interface. The returned query only
                makes available the core
                <xosid:token>FileSearch</xosid:token> interface and
                does not support additional interface types.
               
                <xosid:token>getFileSearchForInterfaceType()</xosid:token>
                should be used if additional interface types are
                required.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearch"/>
                <xosid:description>
                    the file search interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchForInterfaceType">
            <xosid:description>
                Gets a file search interface of the specified type. The
                returned search interface provides access to the search
                interface corresponding to the specified
                <xosid:token>Type </xosid:token>but must not be cast
                directly from this method return.
            </xosid:description>
            <xosid:parameter xosid:name="fileSearchInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the type of search interface to retrieve
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearch"/>
                <xosid:description>
                    the file search
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileSearchInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsFileSearchInterfaceType(fileSearchInterfaceType)</xosid:token>
                   is <xosid:token> false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesBySearch">
            <xosid:description>
                Gets the search results matching the given search query
                using the given search interface. Each element in the
                query array is OR'd.
            </xosid:description>
            <xosid:parameter xosid:name="fileQueries">
                <xosid:interfaceType xosid:type="osid.filing.FileQuery" xosid:array="true"/>
                <xosid:description>
                    the search query array
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="fileSearch">
                <xosid:interfaceType xosid:type="osid.filing.FileSearch"/>
                <xosid:description>
                    the search interface
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchResults"/>
                <xosid:description>
                    the search results
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileQueries
                   </xosid:token>or <xosid:token>
                    fileSearch</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    a<xosid:token> fileQueries
                   </xosid:token>or <xosid:token>
                    fileSearch</xosid:token> is not of this service
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileNotificationSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods to receive notifications on
            adds/changes to <xosid:token>Files.</xosid:token> This
            session is intended for consumers needing to synchronize
            their state with this service without the use of polling.
            Notifications are cancelled when this session is closed.

            <xosid:pbreak/>

            Two view are defined in this session:

            <xosid:pbreak/>

            federated view: includes notifications of files located in
            subdirectories in this directory

            <xosid:pbreak/>

            isolated view: includes notifcations of files in this
            directory only
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the <xosid:token>Directory</xosid:token>
                associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the <xosid:token>Directory</xosid:token> associated
                    with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canRegisterForFileNotifications">
            <xosid:description>
                Tests if this user can register for
                <xosid:token>File</xosid:token> notifications. A
                return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer notification operations.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if notification
                    methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useFederatedDirectoryView">
            <xosid:description>
                Federates the view for methods in this session. A
                federated view will include files in directories which
                are children of this directory.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useIsolatedDirectoryView">
            <xosid:description>
                Isolates the view for methods in this session. An
                isolated view restricts notifications to this diretory
                only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForNewFiles">
            <xosid:description>
                Register for notifications of new files.
                <xosid:token>FileReceiver.newFile()</xosid:token> is
                invoked when a new <xosid:token>File</xosid:token> is
                created.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForChangedFiles">
            <xosid:description>
                Registers for notification of updated files.
                <xosid:token>FileReceiver.changedFile()</xosid:token>
                is invoked when a file is changed.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForChangedFile">
            <xosid:description>
                Registers for notification of an updated file.
                <xosid:token>FileReceiver.changedFile()</xosid:token>
                is invoked when the specified file is changed.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    a file was not found identified by the given
                    <xosid:token>name</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForDeletedFiles">
            <xosid:description>
                Registers for notification of deleted files.
                <xosid:token>FileReceiver.deletedFile()</xosid:token>
                is invoked when a file is deleted.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForDeletedFile">
            <xosid:description>
                Registers for notification of a deleted file.
                <xosid:token>FileReceiver.changedFile()</xosid:token>
                is invoked when the specified file is changed.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    a file was not found identified by the given
                    <xosid:token>name</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryEntryLookupSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods for operating on files and
            directories. A
            <xosid:token>DirectoryENtrySession</xosid:token> is
            associated with a directory that behaves as the current
            directory path for supplying relative path names. Absolute
            path names can be supplied to access any file or directory
            in the file system. 

            <xosid:pbreak/>

            This session defines the following views:

            <xosid:pbreak/>

            <xosid:outline>
                 <xosid:element>
                    comparative view: elements may be silently omitted
                    or re-ordered 
                </xosid:element>
                 <xosid:element>
                    plenary view: provides a complete result set or is
                    an error condition
                </xosid:element>
                 <xosid:element>
                    federated directory view: searches include entries
                    in directories of which this directory is an
                    ancestor 
                </xosid:element>
                 <xosid:element>
                    isolated directory view: lookups are restricted to
                    entries in this directory only
                </xosid:element>
            </xosid:outline>
            Generally, the comparative view should be used for most
            applications as it permits operation even if there is data
            out of sync. Some administrative applications may need to
            know whether it had retrieved an entire set of objects and
            may sacrifice some interoperability for the sake of
            precision using the plenary view.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canLookupDirectoryEntries">
            <xosid:description>
                Tests if this user can perform entry lookups. A return
                of true does not guarantee successful authorization. A
                return of false indicates that it is known all methods
                in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer lookup operations.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if lookup methods
                    are not authorized, <xosid:token>true</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="hasParentDirectory">
            <xosid:description>
                Tests if the directory associated with this session has
                a parent directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a parent exists,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getParentDirectory">
            <xosid:description>
                Gets the parent of the directory associated with this
                session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the parent of the directory associated with this
                    session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>hasParentDirectory()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useComparativeDirectoryView">
            <xosid:description>
                The returns from the lookup methods may omit or
                translate elements based on this session, such as
                authorization, and not result in an error. This view is
                used when greater interoperability is desired at the
                expense of precision.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="usePlenaryDirectoryView">
            <xosid:description>
                A complete view of the file or directory returns is
                desired. Methods will return what is requested or
                result in an error. This view is used when greater
                precision is desired at the expense of
                interoperability.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useFederatedDirectoryView">
            <xosid:description>
                Federates the view for methods in this session. A
                federated view will include entries in directories
                which are children of this directory.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useIsolatedDirectoryView">
            <xosid:description>
                Isolates the view for methods in this session. An
                isolated view restricts lookups to this directory only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="exists">
            <xosid:description>
                Tests if a file, directory or alias name exists. In a
                federated view, the exietence test is performed on this
                directory and any children of this directory. In an
                isolated view, the existence test is restrcited to this
                directory only.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    a file or directory name
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the name exists,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="isFile">
            <xosid:description>
                Tests if a name exists and is a file or an alias to a
                file. In a federated view, the exietence test is
                performed on this directory and any children of this
                directory. In an isolated view, the existence test is
                restrcited to this directory only.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    a file name
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the name is a
                    file, <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="isDirectory">
            <xosid:description>
                Tests if a name exists and is a directory or an alias
                to a directory. In a federated view, the exietence test
                is performed on this directory and any children of this
                directory. In an isolated view, the existence test is
                restrcited to this directory only.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    a file or directory name
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the path is a
                    directory, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="isAlias">
            <xosid:description>
                Tests if a name exists and is an alias. In a federated
                view, the exietence test is performed on this directory
                and any children of this directory. In an isolated
                view, the existence test is restrcited to this
                directory only.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    a file or directory name
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the path is an
                    alias, <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFile">
            <xosid:description>
                Gets a specified file or alias to the file by its name
                in the current directory only. For federated views, use
                <xosid:token>getFilesByName().</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name to the file
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File"/>
                <xosid:description>
                    the file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found or is
                    a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFiles">
            <xosid:description>
                Gets the list of files and aliases to files in this
                directory. In a federated view, this method returns all
                files in descendant directories.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the list of files in this directory
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesByName">
            <xosid:description>
                Gets a specified files and aliases to files for the
                given file name. In an isolated view, this method
                behaves like <xosid:token>getFile().</xosid:token> Is a
                federated view, this method returns a list of files by
                the same name in descendant directories.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the list of files of the given name
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found or is
                    a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesByGenus">
            <xosid:description>
                Gets a <xosid:token>FileList</xosid:token>
                corresponding to the given file genus
                <xosid:token>Type </xosid:token>which does not include
                files of genus types derived from the specified
                <xosid:token>Type. </xosid:token>In plenary mode, the
                returned list contains all known files or an error
                results. Otherwise, the returned list may contain only
                those files that are accessible through this session.
                In both cases, the order of the set is not specified.
            </xosid:description>
            <xosid:parameter xosid:name="fileGenusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a file genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the returned <xosid:token>File list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileGenusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesByDerivedGenusType">
            <xosid:description>
                Gets a <xosid:token>FileList</xosid:token>
                corresponding to the given file genus
                <xosid:token>Type </xosid:token>and include any
                additional files with genus types derived from the
                specified <xosid:token>Type. </xosid:token>In plenary
                mode, the returned list contains all known files or an
                error results. Otherwise, the returned list may contain
                only those files that are accessible through this
                session. In both cases, the order of the set is not
                specified.
            </xosid:description>
            <xosid:parameter xosid:name="fileGenusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a file genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the returned <xosid:token>File list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileGenusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFilesByInterfaceType">
            <xosid:description>
                Gets a <xosid:token>FileList</xosid:token>
                corresponding to the given file interface
                <xosid:token>Type.</xosid:token> The set of files
                implementing the given interface type is
               returned. <xosid:token> </xosid:token>In plenary mode,
                the returned list contains all known files or an error
                results. Otherwise, the returned list may contain only
                those files that are accessible through this session.
                In both cases, the order of the set is not specified.
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a file interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the returned <xosid:token>File list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets a specified directory or alias to the directory by
                its name in the current directory only. For federated
                views, use
                <xosid:token>getDirectoriesByName().</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found or is
                    a file
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectories">
            <xosid:description>
                Gets the list of directories and aliases to directories
                in this directory. In a federated view, this method
                returns all directories in descedent directories.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the list of directories in this directory
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesByName">
            <xosid:description>
                Gets a specified directories and aliases to directories
                for the given directory name. In an isolated view, this
                method behaves like
                <xosid:token>getDirectory().</xosid:token> Is a
                federated view, this method returns a list of
                directories by the same name in descedent directories.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the list of files of the given name
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found or is
                    a directory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesByGenusType">
            <xosid:description>
                Gets a <xosid:token>DirectoryList</xosid:token>
                corresponding to the given directory genus
                <xosid:token>Type </xosid:token>which does not include
                directories of genus types derived from the specified
                <xosid:token>Type. </xosid:token>In plenary mode, the
                returned list contains all known directories or an
                error results. Otherwise, the returned list may contain
                only those directories that are accessible through this
                session. In both cases, the order of the set is not
                specified.
            </xosid:description>
            <xosid:parameter xosid:name="directoryGenusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a directory genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the returned <xosid:token>Directory
                    list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryGenusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesByDerivedGenusType">
            <xosid:description>
                Gets a <xosid:token>DirectoryList</xosid:token>
                corresponding to the given directory genus
                <xosid:token>Type </xosid:token>and include any
                additional directories with genus types derived from
                the specified <xosid:token>Type. </xosid:token>In
                plenary mode, the returned list contains all known
                directories or an error results. Otherwise, the
                returned list may contain only those directories that
                are accessible through this session. In both cases, the
                order of the set is not specified.
            </xosid:description>
            <xosid:parameter xosid:name="directoryGenusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a directory genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the returned <xosid:token>Directory
                    list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryGenusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesByInterfaceType">
            <xosid:description>
                Gets a <xosid:token>DirectoryList</xosid:token>
                corresponding to the given file interface
                <xosid:token>Type.</xosid:token> The set of interfaces
                implementing the given interface type is returned. In
                plenary mode, the returned list contains all known
                directories or an error results. Otherwise, the
                returned list may contain only those directories that
                are accessible through this session. In both cases, the
                order of the set is not specified.
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a directory interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the returned <xosid:token>Directory
                    list</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectorySearchSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session provides methods for searching among
            <xosid:token>Directory</xosid:token> objects. The search
            query is constructed using the
            <xosid:token>DirectoryQuery</xosid:token> interface.
            Multiple <xosid:token>DirectoryQuery</xosid:token>
            interfaces may be submitted into a search to perform a
            boolean <xosid:token>OR.</xosid:token> If more than one
            search element is specified within a single
            <xosid:token>DirectoryQuery</xosid:token> these elements
            form a boolean AND.

            <xosid:pbreak/>

            This session defines views that offer differing behaviors
            for searching.

            <xosid:pbreak/>

            <xosid:outline>
                 <xosid:element>
                    federated directory view: searches include
                    directories in directories of which this directory
                    is an ancestor
                </xosid:element>
                 <xosid:element>
                    isolated directory view: searches are restricted to
                    diectories in this directory only
                </xosid:element>
            </xosid:outline>
             
            <xosid:token>getDirectoriesByQuery()</xosid:token> is the
            basic search method and returns a list of
            <xosid:token>Directories.</xosid:token> A more advanced
            search may be performed with
            <xosid:token>getDirectoriesBySearch().</xosid:token> It
            accepts a <xosid:token>DirectorySearch</xosid:token>
            interface in addition to the query interface for the
            purpose of specifying additional options affecting the
            entire search, such as ordering.
            <xosid:token>getDirectoriesBySearch()</xosid:token> returns
            an <xosid:token>DirectorySearchResults</xosid:token>
            interface that can be used to access the resulting
            <xosid:token>DirectoryList</xosid:token> or be used to
            perform a search within the result set through
            <xosid:token>DirectorySearch.</xosid:token>
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canSearchDirectories">
            <xosid:description>
                Tests if this user can perform
                <xosid:token>Directory</xosid:token> searches. A return
                of true does not guarantee successful authorization. A
                return of false indicates that it is known all methods
                in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer search operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if search methods
                    are not authorized, <xosid:token>true</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useFederatedDirectoryView">
            <xosid:description>
                Federates the view for methods in this session. A
                federated view will include entries in directories
                which are children of this directory.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useIsolatedDirectoryView">
            <xosid:description>
                Isolates the view for methods in this session. An
                isolated view restricts lookups to this directory only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryQuery">
            <xosid:description>
                Gets a directory query interface. The returned query
                only makes available the core
                <xosid:token>DirectoryQuery</xosid:token> interface and
                does not support additional interface types.
               
                <xosid:token>getDirectoryQueryForInterfaceType()</xosid:token>
                should be used if additional interface types are
                required.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the directory query
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryQueryForInterfaceType">
            <xosid:description>
                Gets a directory query interface of the specified type.
                The returned query contains the method to access the
                query interface corresponding to the specified
                <xosid:token>Type </xosid:token>but must not be cast
                directly from this method return.
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the type of query interface to retrieve
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the directory query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsDirectoryInterfaceType()</xosid:token>
                   is <xosid:token> false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesByQuery">
            <xosid:description>
                Gets a list of <xosid:token>Directory</xosid:token>
                objects matching the given search interface. Each
                element in the array is OR'd.
            </xosid:description>
            <xosid:parameter xosid:name="directoryQueries">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery" xosid:array="true"/>
                <xosid:description>
                    the search query array
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the returned
                    <xosid:token>DirectoryList</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryQueries</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryQuery</xosid:token> is not of
                    this service
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearch">
            <xosid:description>
                Gets a diectory search interface. The returned query
                only makes available the core
                <xosid:token>DirectorySearch</xosid:token> interface
                and does not support additional interface types.
               
                <xosid:token>getDirectorySearchForInterfaceType()</xosid:token>
                should be used if additional interface types are
                required.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearch"/>
                <xosid:description>
                    the directory search interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchForInterfaceType">
            <xosid:description>
                Gets a directory search interface of the specified
                type. The returned search interface provides access to
                the search interface corresponding to the specified
                <xosid:token>Type </xosid:token>but must not be cast
                directly from this method return.
            </xosid:description>
            <xosid:parameter xosid:name="directorySearchInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the type of search interface to retrieve
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearch"/>
                <xosid:description>
                    the directory search
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>

                                        <xosid:token>directorySearchInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsDirectorySearchInterfaceType(directorySearchInterfaceType)</xosid:token>
                   is <xosid:token> false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoriesBySearch">
            <xosid:description>
                Gets the search results matching the given search
                interface. Each element in the array is OR'd.
            </xosid:description>
            <xosid:parameter xosid:name="directoryQueries">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery" xosid:array="true"/>
                <xosid:description>
                    the search query array
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directorySearch">
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearch"/>
                <xosid:description>
                    the search interface
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchResults"/>
                <xosid:description>
                    the search results
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryQueries
                   </xosid:token>or <xosid:token>
                    directorySearch</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    a <xosid:token>directoryQuery
                   </xosid:token>or <xosid:token>
                    directorySearch</xosid:token> is not of this
                    service
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryAdminSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session creates and removes files and directories
            under the directory associated with this session.

            <xosid:pbreak/>

            The view of the administrative methods defined in this
            session is determined by the provider. For an instance of
            this session where no repository has been specified, it may
            not be parallel to the
            <xosid:token>DirectoryLookupSession.</xosid:token> For
            example, a default
            <xosid:token>DirectoryLookupSession</xosid:token> may view
            the entire directory hierarchy while the default
            <xosid:token>DirectoryAdminSession</xosid:token> uses an
            isolated <xosid:token>Directory</xosid:token> to create new
            entries. Another scenario is a federated provider who does
            not wish to permit administrative operations for the
            federation unaware.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canModifyDirectory">
            <xosid:description>
                Tests if this user can create or remove entries in this
                directory. A return of true does not guarantee
                successful authorization. A return of false indicates
                that it is known modifying this directory will result
                in a <xosid:token>PERMISSION_DENIED.</xosid:token> This
                is intended as a hint to an application that may opt
                not to offer create operations to an unauthorized user.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if modifying this
                    directory is not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="overwrite">
            <xosid:description>
                Overwrite files if a destination pathname exists and is
                a file.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canCreateFileWithInterfaceTypes">
            <xosid:description>
                Tests if this user can create a single
                <xosid:token>File </xosid:token>using the desired
                interface types. A <xosid:token>File
               </xosid:token>interface <xosid:token>
                Type</xosid:token> may specify the implementation of
                other more well-known <xosid:token>Types.</xosid:token>
                A provider may or may not accept the creation of a
                <xosid:token>File</xosid:token> using anything other
                than the <xosid:token>FileForm</xosid:token> of the
                leaf interface <xosid:token>Type,</xosid:token> or may
                accept creation using one or more higher level
                interface <xosid:token>Types.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceTypes">
                <xosid:interfaceType xosid:type="osid.type.Type" xosid:array="true"/>
                <xosid:description>
                    array of types
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if
                    <xosid:token>File</xosid:token> creation using the
                    specified interface
                    <xosid:token>Types</xosid:token> is supported,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceTypes</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getRequiredFileInterfaceTypesForCreate">
            <xosid:description>
                Gets the list of minimum required interface
                <xosid:token>Types</xosid:token> for creating a new
                <xosid:token>File. </xosid:token>A new
                <xosid:token>File</xosid:token> can be created using
                any one of the interface types returned in this list.
                This may be a series of leaf
                <xosid:token>Types,</xosid:token> or multiple higher
                level <xosid:token>Types</xosid:token> if creation
                requirements are more lenient. An empty list suggests
                no creates are supported as a root
                <xosid:token>File</xosid:token> interface is always
                identified with its own
                <xosid:token>Type.</xosid:token>
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.TypeList"/>
                <xosid:description>
                    one or more types
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileFormForCreate">
            <xosid:description>
                Gets the file form for creating new files. A new form
                should be requested for each create transaction.
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the interface <xosid:token>Type</xosid:token> of
                    the <xosid:token>Directory</xosid:token> to be
                    created
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileForm"/>
                <xosid:description>
                    the file form
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>canCreateFileWithInterfaceTypes(fileInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="createFile">
            <xosid:description>
                Creates a new file in this directory.
            </xosid:description>
            <xosid:parameter xosid:name="fileForms">
                <xosid:interfaceType xosid:type="osid.filing.FileForm" xosid:array="true"/>
                <xosid:description>
                    the file forms
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File"/>
                <xosid:description>
                    the new file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ALREADY_EXISTS" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> already exists as a
                    file in this direrctory and
                    <xosid:token>overwrite()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    one or more of the form elements is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileForms</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    a <xosid:token>fileForm</xosid:token> is not
                    supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileFormForUpdate">
            <xosid:description>
                Gets the file form for updating an existing files. A
                new file form should be requested for each update
                transaction.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    name of the file to update
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileForm"/>
                <xosid:description>
                    the file form
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="updateFile">
            <xosid:description>
                Updates an existing file.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="fileForm">
                <xosid:interfaceType xosid:type="osid.filing.FileForm"/>
                <xosid:description>
                    the form containing the elements to be updated
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    the form contains an invalid value
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name
                   </xosid:token>or <xosid:token>
                    fileForm</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>fileForm</xosid:token> is not
                    supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="removeFile">
            <xosid:description>
                Deletes a file.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the file to delete
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canCreateDirectoryWithInterfaceTypes">
            <xosid:description>
                Tests if this user can create a single
                <xosid:token>Directory </xosid:token>using the desired
                interface types. A <xosid:token>Directory
               </xosid:token>interface <xosid:token>
                Type</xosid:token> may specify the implementation of
                other more well-known <xosid:token>Types.</xosid:token>
                A provider may or may not accept the creation of a
                <xosid:token>Directory</xosid:token> using anything
                other than the <xosid:token>DirectoryForm</xosid:token>
                of the leaf interface <xosid:token>Type,</xosid:token>
                or may accept creation using one or more higher level
                interface <xosid:token>Types.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceTypes">
                <xosid:interfaceType xosid:type="osid.type.Type" xosid:array="true"/>
                <xosid:description>
                    array of types
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if
                    <xosid:token>Directory</xosid:token> creation
                    using the specified interface
                    <xosid:token>Types</xosid:token> is supported,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceTypes</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getRequiredDirectoryInterfaceTypesForCreate">
            <xosid:description>
                Gets the list of minimum required interface
                <xosid:token>Types</xosid:token> for creating a new
                <xosid:token>Directory.</xosid:token> A new
                <xosid:token>Directory</xosid:token> can be created
                with any one of the interface types returned in this
                list. This may be a series of leaf
                <xosid:token>Types,</xosid:token> or multiple higher
                level <xosid:token>Types</xosid:token> if creation
                requirements are more lenient. An empty list suggests
                no creates are supported as a root
                <xosid:token>Directory</xosid:token> interface is
                always identified with its own
                <xosid:token>Type.</xosid:token>
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.TypeList"/>
                <xosid:description>
                    one or more types
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryFormForCreate">
            <xosid:description>
                Gets the file form for creating new directories. A new
                form should be requested for each create transaction.
                This method is used for creating new
                <xosid:token>Directories</xosid:token> where only the
                <xosid:token>Directory</xosid:token>
                <xosid:token>Type</xosid:token> is known.
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the interface <xosid:token>Type</xosid:token> of
                    the <xosid:token>Directory</xosid:token> to be
                    created
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryForm"/>
                <xosid:description>
                    the directory form
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>canCreateDirectoryWithInterfaceTypes(directoryInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="createDirectory">
            <xosid:description>
                Creates a new directory.
            </xosid:description>
            <xosid:parameter xosid:name="directoryForms">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryForm" xosid:array="true"/>
                <xosid:description>
                    the directory forms
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the new directory
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ALREADY_EXISTS" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> already exists as a
                    file in this direrctory
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    one or more of the form elements is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryForms</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryFormForUpdate">
            <xosid:description>
                Gets the directory form for updating an existing files.
                A new directory form should be requested for each
                update transaction. This method is used when the
                <xosid:token>Directory</xosid:token> to be updated is
                known and is desired to access any metadata specific to
                the <xosid:token>Directory</xosid:token> being updated.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    name of the directory to update
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryForm"/>
                <xosid:description>
                    the directory form
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="updateDirectory">
            <xosid:description>
                Updates an existing directory.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    name of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="directory">
                <xosid:interfaceType xosid:type="osid.filing.DirectoryForm"/>
                <xosid:description>
                    the form containing the elements to be updated
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    the form contains an invalid value
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name
                   </xosid:token>or <xosid:token>
                    directoryForm</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>directoryForm</xosid:token> is not
                    supported
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="removeDirectory">
            <xosid:description>
                Deletes a directory in this directory. The directory to
                remove must be empty.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the directory to delete
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>name</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryNotificationSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods to receive notifications on
            adds/changes to <xosid:token>Directories.</xosid:token>
            This session is intended for consumers needing to
            synchronize their state with this service without the use
            of polling. Notifications are cancelled when this session
            is closed.

            <xosid:pbreak/>

            Two view are defined in this session:

            <xosid:pbreak/>

            federated view: includes notifications of directories
            located in descendants of this directory

            <xosid:pbreak/>

            isolated view: includes notifcations of directories in this
            directory only
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the <xosid:token>Directory</xosid:token>
                associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the <xosid:token>Directory</xosid:token> associated
                    with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canRegisterForDirectoryNotifications">
            <xosid:description>
                Tests if this user can register for
                <xosid:token>Directory</xosid:token> notifications. A
                return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer notification operations.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if notification
                    methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useFederatedDirectoryView">
            <xosid:description>
                Federates the view for methods in this session. A
                federated view will include directories in directories
                which are children of this directory.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="useIsolatedDirectoryView">
            <xosid:description>
                Isolates the view for methods in this session. An
                isolated view restricts notifications to this diretory
                only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForNewDirectories">
            <xosid:description>
                Register for notifications of new directories.
               
                <xosid:token>DirectoryReceiver.newDirectory()</xosid:token>
                is invoked when a new
                <xosid:token>Directory</xosid:token> is created.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForChangedDirectories">
            <xosid:description>
                Registers for notification of updated directories.
               
                <xosid:token>DirectoryReceiver.changedDirectory()</xosid:token>
                is invoked when a file is changed.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForChangedDirectory">
            <xosid:description>
                Registers for notification of an updated file.
               
                <xosid:token>DirectoryReceiver.changedDirectory()</xosid:token>
                is invoked when the specified directory is changed.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the directory to monitor
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    a directory was not found identified by the given
                    <xosid:token>name</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForDeletedDirectories">
            <xosid:description>
                Registers for notification of deleted directories.
               
                <xosid:token>DirectoryReceiver.deletedDirectory()</xosid:token>
                is invoked when a directory is deleted.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForDeletedDirectory">
            <xosid:description>
                Registers for notification of a deleted directory.
               
                <xosid:token>DirectoryReceiver.changedDirectory()</xosid:token>
                is invoked when the specified directory is changed.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the name of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    a directory was not found identified by the given
                    <xosid:token>path</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>path</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FilingManagementSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods for operating on files and
            directories. This session is an expanded version of the
            <xosid:token>DirectoryAdminSession</xosid:token> that
            defines methods requiring path names for navigating a
            federation of directories as opposed to working within a
            single directory node. The directory associated with this
            session is the current working directory and any relative
            path names provided are with respect to this directory.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canManageFiling">
            <xosid:description>
                Tests if this user can perform functions in this
                session. A return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer lookup operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if filing
                    management methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="overwrite">
            <xosid:description>
                Overwrite files if a destination pathname exists.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="createMissingPaths">
            <xosid:description>
                Create any missing directories for a destination path
                that does not exist.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method is must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="moveFile">
            <xosid:description>
                Moves a file to another path. The detination path may
                be a file or directory. If the destination is a file
                and exists, the destination is only replaced if
                <xosid:token>overwrite()</xosid:token> is
                <xosid:token>true.</xosid:token> If the desitination
                is a directory and does not exist, the missing
                directories are only created if
                <xosid:token>createMissingPaths()</xosid:token> is
                <xosid:token>true.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="src">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the source name or path of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="dst">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the destination name or path of the directory or
                    file
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="ALREADY_EXISTS" xosid:category="User">
                <xosid:description>
                    <xosid:token>dst</xosid:token> exists and
                    <xosid:token>overwrite()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>src</xosid:token> is not found, or the
                    path to <xosid:token>dst</xosid:token> is not found
                    and <xosid:token>createMissingPaths()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>src</xosid:token> or
                    <xosid:token>dst </xosid:token>is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="moveDirectory">
            <xosid:description>
                Moves a directory to another path. The destination must
                be a directory and if exists, the source directory is
                placed as a child to the given directory. If a path
                component in the destination does not exist, the path
                is created is
                <xosid:token>createMissingPaths()</xosid:token> is
                <xosid:token>true.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="src">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the source name or path of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="dst">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the destination name or path of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>src</xosid:token> is not found, or the
                    path to <xosid:token>dst</xosid:token> is not found
                    and <xosid:token>createMissingPaths()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>src</xosid:token> or
                    <xosid:token>dst </xosid:token>is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="copyFile">
            <xosid:description>
                Copies a file to another path. The detination path may
                be a file or directory. If the destination is a file
                and exists, the destination is only replaced if
                <xosid:token>overwrite()</xosid:token> is
                <xosid:token>true.</xosid:token> If the desitination
                is a directory and does not exist, the missing
                directories are only created if
                <xosid:token>createMissingPaths()</xosid:token> is
                <xosid:token>true.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="src">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the source name or path of the file
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="dst">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the destination name or path of the directory or
                    file
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="ALREADY_EXISTS" xosid:category="User">
                <xosid:description>
                    <xosid:token>dst</xosid:token> exists and
                    <xosid:token>overwrite()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>src</xosid:token> is not found, or the
                    path to <xosid:token>dst</xosid:token> is not found
                    and <xosid:token>createMissingPaths()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>src</xosid:token> or
                    <xosid:token>dst </xosid:token>is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="copyDirectory">
            <xosid:description>
                Copies a directory and all of its contents to another
                path. The destination must be a directory and if
                exists, the source directory is placed as a child to
                the given directory. If a path component in the
                destination does not exist, the path is created is
                <xosid:token>createMissingPaths()</xosid:token> is
                <xosid:token>true.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="src">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the source name or path of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="dst">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the destination name or path of the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>src</xosid:token> is not found, or the
                    path to <xosid:token>dst</xosid:token> is not found
                    and <xosid:token>createMissingPaths()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>src</xosid:token> or
                    <xosid:token>dst </xosid:token>is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="alias">
            <xosid:description>
                Creates an alias from one path to another.
            </xosid:description>
            <xosid:parameter xosid:name="src">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the source path
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="dst">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the destination path
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>src</xosid:token> is not found, or the
                    path to <xosid:token>dst</xosid:token> is not found
                    and <xosid:token>createMissingPaths()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>src</xosid:token> or
                    <xosid:token>dst </xosid:token>is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="unalias">
            <xosid:description>
                Removes an alias.
            </xosid:description>
            <xosid:parameter xosid:name="aliasPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the relative or absolute path to the alias.
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>aliasPath</xosid:token> not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>aliasPath</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.AllocationSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods for accessing space allocation
            and quotas.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canAccessFilingAllocations">
            <xosid:description>
                Tests if this user can perform functions in this
                session. A return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer lookup operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if filing
                    allocation methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAllocation">
            <xosid:description>
                Gets the allocation of the data store across all users.
                The directory available by the allocation interface may
                indicate a higher level directory than the one
                associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Allocation"/>
                <xosid:description>
                    the allocation
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="hasQuota">
            <xosid:description>
                Tests if there is a quota associated with this
                directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a quota exists,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getQuotaAllocation">
            <xosid:description>
                Gets the quota allocation of the data store for this
                user. The directory available by the allocation
                interface may indicate a higher level directory than
                the one requested if the one requested is a
                sub-directory inside the qoutad data store.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Allocation"/>
                <xosid:description>
                    the allocation
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>hasQuota()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.AllocationAdminSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods for managing quotas.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the directory associated with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canAccessAllocations">
            <xosid:description>
                Tests if this user can perform lookup functions in this
                session. A return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer lookup operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if filing
                    allocation lookup methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="hasQuota">
            <xosid:description>
                Tests if the given user has a quota in this directory.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the agent <xosid:token>Id</xosid:token> of the user
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a quota exists,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getQuotaAllocation">
            <xosid:description>
                Gets the quota allocation of the data store for a given
                user. The directory available by the allocation
                interface may indicate a higher level directory than
                the one requested if the one requested is a
                sub-directory inside the qoutad data store.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the agent <xosid:token>Id</xosid:token> of the user
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Allocation"/>
                <xosid:description>
                    the allocation
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>hasQuota(agentId)</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canSetAllocations">
            <xosid:description>
                Tests if this user can perform quota assignments in
                this session. A return of true does not guarantee
                successful authorization. A return of false indicates
                that it is known all methods in this session will
                result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer lookup operations to unauthorized users.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if filing
                    allocation assignment methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setQuotaSpace">
            <xosid:description>
                Sets the quota allocation for a given user for this
                directory.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the agent <xosid:token>Id</xosid:token> of the user
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="size">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    space in bytes
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setQuotaFiles">
            <xosid:description>
                Sets the quota allocation for a given user for this
                directory.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the agent <xosid:token>Id</xosid:token> of the user
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="numFiles">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of files
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NOT_FOUND" xosid:category="User">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is not found
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.AllocationNotificationSession"> 
        <xosid:implements xosid:interface="osid.OsidSession"/>
        <xosid:description>
            This session defines methods to receive notifications of
            allocation warnings and changed quota assignments. This
            session is intended for consumers needing to synchronize
            their state with this service without the use of polling.
            Notifications are cancelled when this session is closed.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path of this directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the absolute path of this directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the <xosid:token>Directory</xosid:token>
                associated with this session.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the <xosid:token>Directory</xosid:token> associated
                    with this session
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="canRegisterForAllocationNotifications">
            <xosid:description>
                Tests if this user can register for
                <xosid:token>Directory</xosid:token> notifications. A
                return of true does not guarantee successful
                authorization. A return of false indicates that it is
                known all methods in this session will result in a
                <xosid:token>PERMISSION_DENIED.</xosid:token> This is
                intended as a hint to an application that may opt not
                to offer notification operations.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>false</xosid:token> if notification
                    methods are not authorized,
                    <xosid:token>true</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForAllocationWarnings">
            <xosid:description>
                Register for notifications of allocation warnings.
               
                <xosid:token>AllocationReceiver.warning()</xosid:token>
                is invoked when a new warning is issued.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForAllocationClearWarnings">
            <xosid:description>
                Register for notifications of clearing of allocation
                warnings.
                <xosid:token>AllocationReceiver.clearWarning()</xosid:token>
                is invoked when a warning is cleared.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="registerForChangedQuota">
            <xosid:description>
                Registers for notification of new, updated or changed
                quotas.
                <xosid:token>AllocationReceiver.changedQuota()</xosid:token>
                is invoked when a quota is changed.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryEntry"> 
        <xosid:implements xosid:interface=""/>
        <xosid:description>
            <xosid:token>DirectoryEntry</xosid:token> defines methods
            in common to both <xosid:token>File</xosid:token> and
            <xosid:token>Directory.</xosid:token>
        </xosid:description>


        <xosid:method xosid:name="getName">
            <xosid:description>
                Gets the name of this entry. The name does not include
                the path. If this entry represents an alias, the name
                of the alias is returned.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the entry name
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAlias">
            <xosid:description>
                Tests if this entry is an alias.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if this is an
                    alias, <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getPath">
            <xosid:description>
                Gets the full path of this entry. The path includes the
                name. Path components are separated by a /. If this
                entry represents an alias, the path to the alias is
                returned.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the path
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getRealPath">
            <xosid:description>
                Gets the real path of this entry. The path includes the
                name. Path components are separated by a /. If this
                entry represents an alias, the full path to the target
                file or directory is returned.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the path
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getOwnerId">
            <xosid:description>
                Gets the <xosid:token>Id</xosid:token> of the
                <xosid:token>Agent</xosid:token> that owns this entry.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the<xosid:token> Agent Id</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getOwner">
            <xosid:description>
                Gets the <xosid:token>Agent</xosid:token> that owns
                this entry.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.authentication.Agent"/>
                <xosid:description>
                    the<xosid:token> Agent</xosid:token>
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    authentication service not available
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getCreatedTime">
            <xosid:description>
                Gets the created time of this entry.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    the created time
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getLastModifiedTime">
            <xosid:description>
                Gets the last modified time of this entry.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    the last modified time
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getLastAccessTime">
            <xosid:description>
                Gets the last access time of this entry.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    the last access time
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getInterfaceType">
            <xosid:description>
                Gets the type of this entry. The
                <xosid:token>Type</xosid:token> explicitly indicates
                the specification of the extension interface and
                implicitly may define an object family.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the type
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="implementsInterfaceType">
            <xosid:description>
                Tests if this entry supports the given interface
                <xosid:token>Type.</xosid:token> The given type may be
                supported by the key type through inheritence.
            </xosid:description>
            <xosid:parameter xosid:name="interfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    an interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if this entry
                    supports the given interface
                    <xosid:token>Type,</xosid:token>
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>interfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getGenusType">
            <xosid:description>
                Gets the genus type of this object.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the genus type of this object
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="isOfGenus">
            <xosid:description>
                Tests if this object is of the given genus
                <xosid:token>Type.</xosid:token> The given genus type
                may be supported by the object through the type
                hierarchy.
            </xosid:description>
            <xosid:parameter xosid:name="genusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if this object is
                    of the given genus <xosid:token>Type,</xosid:token>
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>genusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="isCurrent">
            <xosid:description>
                Tests to see if the last method invoked retrieved
                up-to-date data. Simple retrieval methods do not
                specify errors as, generally, the data is retrieved
                once at the time this object is instantiated. Some
                implementations may provide real-time data though the
                application may not always care. An implementation
                providing a real-time service may fall back to a
                previous snapshot in case of error. This method returns
                false if the data last retrieved was stale.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the last data
                    retrieval was up to date,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
            <xosid:implNotes>
                Providers should return false unless all getters are
                implemented using real-time queries, or some trigger
                process keeps the data in this object current.
                Providers should populate basic data elements at the
                time this object is instantiated, or set an error, to
                ensure some data availability.
            </xosid:implNotes>
        </xosid:method>

        <xosid:method xosid:name="getProperties">
            <xosid:description>
                Gets a list of properties corresponding to the
                interface type of this object. Properties provide a
                means for applications to display a representation of
                the contents of an object without understanding its
                <xosid:token>Type</xosid:token> specification.
                Applications needing to examine a specific property or
                perform updates should use the methods defined by the
                object's interface <xosid:token>Type.</xosid:token>
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.PropertyList"/>
                <xosid:description>
                    a list of properties
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    an authorization failure occurred
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getPropertiesByInterfaceType">
            <xosid:description>
                Gets a list of properties corresponding to the
                specified interface type. Properties provide a means
                for applications to display a representation of the
                contents of an object without understanding its
                interface <xosid:token>Type</xosid:token>
                specification. Applications needing to examine a
                specific property or perform updates should use the
                methods defined by the object interface
                <xosid:token>Type. </xosid:token>The resulting set
                includes properties specified by parents of the
                interface <xosid:token>type</xosid:token> in the
                interface type hierarchy.
            </xosid:description>
            <xosid:parameter xosid:name="interfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the interface type corresponding to the properties
                    set to retrieve
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.PropertyList"/>
                <xosid:description>
                    a list of properties
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>interfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    an authorization failure occurred
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>implementsInterfaceType(interfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryEntryQuery"> 
        <xosid:implements xosid:interface=""/>
        <xosid:description>
            <xosid:token>DirectoryEntryQuery</xosid:token> defines
            methods in common to both
            <xosid:token>FileQuery</xosid:token> and
            <xosid:token>DirectoryQuery.</xosid:token>
        </xosid:description>


        <xosid:method xosid:name="getStringMatchTypes">
            <xosid:description>
                Gets the string matching types supported.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.type.TypeList"/>
                <xosid:description>
                    a list containing the supported string match types
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsStringMatchType">
            <xosid:description>
                Tests if the given string matching type is supported.
            </xosid:description>
            <xosid:parameter xosid:name="searchType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a <xosid:token>Type</xosid:token> indicating a
                    string match type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if the given Type
                    is supported, <xosid:token>false</xosid:token>
                    otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchName">
            <xosid:description>
                Matches entry names. Supplying multiple strings behaves
                like a boolean <xosid:token>AND</xosid:token> among the
                elements each which must correspond to the
                <xosid:token>stringMatchType.</xosid:token> An
                <xosid:token>OR</xosid:token> can be performed with
                multiple query interfaces.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    name to match
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="stringMatchType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the string match type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>name</xosid:token> not of
                    <xosid:token>stringMatchType</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> or
                    <xosid:token>stringMatchType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsStringMatchType(stringMatchType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchPath">
            <xosid:description>
                Matches an absolute pathname of a directory entry.
                Supplying multiple strings behaves like a boolean
                <xosid:token>AND</xosid:token> among the elements each
                which must correspond to the
                <xosid:token>stringMatchType.</xosid:token> An
                <xosid:token>OR</xosid:token> can be performed with
                multiple query interfaces.
            </xosid:description>
            <xosid:parameter xosid:name="path">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    path to match
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="stringMatchType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the string match type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>name</xosid:token> not of
                    <xosid:token>stringMatchType</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>path</xosid:token> or
                    <xosid:token>stringMatchType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsStringMatchType(stringMatchType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsDirectoryQuery">
            <xosid:description>
                Tests if a <xosid:token>DirectoryQuery</xosid:token> is
                available.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a directory
                    query interface is available,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryQuery">
            <xosid:description>
                Gets the query interface for a directory to match the
                parent directory. There is only one
                <xosid:token>DirectoryQuery</xosid:token> per
                <xosid:token>DifrectoryEntryQuery.</xosid:token>
                Multiple retrievals return the same object.
            </xosid:description>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the directory query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsDirectoryQuery()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryQuery()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryQueryForInterfaceType">
            <xosid:description>
                Gets the directory query interface for the directory
                type. Supported types are defined in the
                <xosid:token>FilingManager.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a directory interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the directory query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportDirectoryQuery()</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsDirectoryInterfaceType(directoryInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                   
                    <xosid:token>supportsDirectoryQuery()</xosid:token>
                    is <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchAliases">
            <xosid:description>
                Matches aliases only.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchTargets">
            <xosid:description>
                Matches target files only, ommitting aliases.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchAll">
            <xosid:description>
                Matches both targets and aliases.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchOwnerId">
            <xosid:description>
                Matches files whose entries are owned by the given
                agent id.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the agent <xosid:token>Id</xosid:token>
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="supportsAgentQuery">
            <xosid:description>
                Tests if an <xosid:token>AgentQuery</xosid:token> is
                available for querying agents.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if an agent query
                    interface is available,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAgentQuery">
            <xosid:description>
                Gets the query interface for an agent.
            </xosid:description>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.authentication.AgentQuery"/>
                <xosid:description>
                    the agent query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAgentQuery()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAgentQuery()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAgentQueryForInterfaceType">
            <xosid:description>
                Gets the agent query interface for the repository type.
                Supported agent types are defined in the
                <xosid:token>FilingManager.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="agentInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the agent interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.authentication.AgentQuery"/>
                <xosid:description>
                    the agent query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsAgentQuery()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsAgentInterfaceType(agentInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsAgentQuery()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchCreatedTime">
            <xosid:description>
                Match directory entries that are created between the
                specified time period.
            </xosid:description>
            <xosid:parameter xosid:name="start">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    start time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="end">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    end time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>end</xosid:token> is les than
                    <xosid:token>start</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>start</xosid:token> or
                    <xosid:token>end</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchModifiedTime">
            <xosid:description>
                Match directory entries that are modified between the
                specified time period.
            </xosid:description>
            <xosid:parameter xosid:name="start">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    start time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="end">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    end time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>end</xosid:token> is les than
                    <xosid:token>start</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>start</xosid:token> or
                    <xosid:token>end</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchLastAccessTime">
            <xosid:description>
                Match directory entries that were last accessed between
                the specified time period.
            </xosid:description>
            <xosid:parameter xosid:name="start">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    start time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="end">
                <xosid:interfaceType xosid:type="osid.calendaring.DateTime"/>
                <xosid:description>
                    end time of the query
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>end</xosid:token> is les than
                    <xosid:token>start</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>start</xosid:token> or
                    <xosid:token>end</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchGenusType">
            <xosid:description>
                Sets a <xosid:token>Type</xosid:token> for querying
                objects of a given genus.
            </xosid:description>
            <xosid:parameter xosid:name="genusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the object genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>genusType
                   </xosid:token>is <xosid:token> null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchInterfaceType">
            <xosid:description>
                Sets a <xosid:token>Type</xosid:token> for querying
                objects of a given interface type.
            </xosid:description>
            <xosid:parameter xosid:name="interfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the object interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>interfaceType
                   </xosid:token>is <xosid:token> null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryEntrySearch"> 
        <xosid:implements xosid:interface=""/>
        <xosid:description>
            <xosid:token>DirectoryEntrySearch</xosid:token> defines
            methods in common to both
            <xosid:token>FileSearch</xosid:token> and
            <xosid:token>DirectorySearch.</xosid:token>
        </xosid:description>


        <xosid:method xosid:name="limitResultSet">
            <xosid:description>
                By default, searches return all matching results. This
                method restricts the number of results by setting the
                start and end of the result set. The starting and
                ending results can be used for paging results when a
                certain ordering is requested. A starting position of 0
                effectively sets the maximum number of results with the
                ending position. The ending position must be greater
                than the starting position.
            </xosid:description>
            <xosid:parameter xosid:name="start">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    the start of the result set
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="end">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    the end of the result set
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>end </xosid:token>is less than or
                    equal to <xosid:token>start</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByName">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry name.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByPath">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry path.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByOwner">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry owner.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByCreatedTime">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry creation time.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByModifiedTime">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry modification time.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByLastAccessTime">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry last access time.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByGenusType">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry genus type.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderByInterfaceType">
            <xosid:description>
                Specifies a preference for ordering the result set by
                the entry interface type.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryEntryForm"> 
        <xosid:implements xosid:interface=""/>
        <xosid:description>
            <xosid:token>DirectoryEntryForm</xosid:token> defines
            methods in common to both
            <xosid:token>FileForm</xosid:token> and
            <xosid:token>DirectoryForm.</xosid:token>
        </xosid:description>


        <xosid:method xosid:name="getCommentMetadata">
            <xosid:description>
                Gets the metadata for the comment corresponding to this
                form submission. The comment is used for describing the
                nature of the change to the corresponding object for
                the purposes of logging and auditing.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.Metadata"/>
                <xosid:description>
                    metadata for the comment
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setComment">
            <xosid:description>
                Sets a comment.
            </xosid:description>
            <xosid:parameter xosid:name="comment">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the new comment
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>comment</xosid:token> is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NO_ACCESS" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>comment</xosid:token> cannot be
                    modified
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>comment</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="validate">
            <xosid:description>
                Performs a validation of the data set in this form.
                This method returns nothing if validation is not
                performed or validation is successful. An transaction
                is returned if the form is invalid.
            </xosid:description>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    attempt to perform validation failed
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="TRANSACTION_FAILURE" xosid:category="Operational">
                <xosid:description>
                    form is invalid
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getNameMetadata">
            <xosid:description>
                Gets the metadata for the name.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.Metadata"/>
                <xosid:description>
                    metadata for the name
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setName">
            <xosid:description>
                Sets the name.
            </xosid:description>
            <xosid:parameter xosid:name="name">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    the new name
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>name</xosid:token> is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NO_ACCESS" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>name</xosid:token> cannot be modified
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>displayName</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getOwnerMetadata">
            <xosid:description>
                Gets the metadata for the owner.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.Metadata"/>
                <xosid:description>
                    metadata for the owner
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setOwner">
            <xosid:description>
                Sets the owner.
            </xosid:description>
            <xosid:parameter xosid:name="agentId">
                <xosid:interfaceType xosid:type="osid.id.Id"/>
                <xosid:description>
                    the new owner
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NO_ACCESS" xosid:category="Programming">
                <xosid:description>
                    owner cannot be modified
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>agentId</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getGenusMetadata">
            <xosid:description>
                Gets the metadata for the genus type.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.Metadata"/>
                <xosid:description>
                    metadata for the genus
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="setGenus">
            <xosid:description>
                Sets the genus type.
            </xosid:description>
            <xosid:parameter xosid:name="genusType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the new genus type
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>genusType</xosid:token> is invalid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NO_ACCESS" xosid:category="Programming">
                <xosid:description>
                    genus cannot be modified
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>genusType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.File"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntry"/>
        <xosid:description>
            <xosid:token>File</xosid:token> represents a file in a file system.

            <xosid:pbreak/>

            <xosid:token>getFileInterface()</xosid:token> should be
            used to retrieve the interface corresponding to this Type.
            The existence of the interface must not be assumed until
            requested at which point it is safe to cast into the
            interface indicated by the type.
        </xosid:description>


        <xosid:method xosid:name="hasSize">
            <xosid:description>
                Tests if this file has a known size.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if this file has a
                    size, <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getSize">
            <xosid:description>
                Gets the size of this file in bytes if
                <xosid:token>hasSize()</xosid:token> is
                <xosid:token>true.</xosid:token>
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    the size of this file
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>hasSize()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileInterface">
            <xosid:description>
                Gets the <xosid:token>File</xosid:token> interface
                corresponding to the given
                <xosid:token>File</xosid:token> <xosid:token>Type.
                </xosid:token>A <xosid:token>File</xosid:token>
                returned from another method is only required to
                implement the root <xosid:token>File</xosid:token>
                interface and this method must be used to retrieve a
                file object implementing the requested interface along
                with all of its ancestor interfaces, including the core
                <xosid:token>File</xosid:token> interface. The
                <xosid:token>fileInterfaceType</xosid:token> may be
                the <xosid:token>Type</xosid:token> returned by
                <xosid:token>getInterfaceType()</xosid:token> or any
                parent of <xosid:token>getInterfaceType()</xosid:token>
                in the <xosid:token>Type</xosid:token> hierarchy where
               
                <xosid:token>implementsInterfaceType(fileInterfaceType)</xosid:token>
                is <xosid:token>true</xosid:token>.
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the file interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File"/>
                <xosid:description>
                    the typed interface
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure occurred
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>implementsInterfaceType(fileInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileQuery"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntryQuery"/>
        <xosid:description>
            This is the query interface for searching files. Each
            method match request produces an
            <xosid:token>AND</xosid:token> term while multiple
            invocations of a method produces a nested
            <xosid:token>OR,</xosid:token> except for accessing the
            <xosid:token>FileQuery</xosid:token> subinterface.
        </xosid:description>


        <xosid:method xosid:name="matchSize">
            <xosid:description>
                Matches files whose size is within and including the
                given range.
            </xosid:description>
            <xosid:parameter xosid:name="from">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    low file size
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="to">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    high file size
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>to</xosid:token> is les than
                    <xosid:token>from</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchDataString">
            <xosid:description>
                Adds data strings to this query to match files whose
                content contains these strings. Supplying multiple
                strings behaves like a boolean AND among the elements
                each which must correspond to the
                <xosid:token>stringMatchType.</xosid:token> An OR can
                be performed with multiple query interfaces.
            </xosid:description>
            <xosid:parameter xosid:name="data">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    string to match
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="stringMatchType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the string match type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>data</xosid:token> not of
                    <xosid:token>stringMatchType</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>data</xosid:token> or
                    <xosid:token>stringMatchType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>supportsStringMatchType(stringMatchType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="matchData">
            <xosid:description>
                Matches files who data contains the given bytes.
            </xosid:description>
            <xosid:parameter xosid:name="data">
                <xosid:primitiveType xosid:type="byte" xosid:array="true"/>
                <xosid:description>
                    data to match
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>data</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileQueryInterface">
            <xosid:description>
                Gets the <xosid:token>FileQuery</xosid:token> interface
                corresponding to the <xosid:token>File</xosid:token>
                interface <xosid:token>Type</xosid:token> provided in
                the search session.<xosid:token> </xosid:token>A
                <xosid:token>FileQuery</xosid:token> returned from the
                search session is only required to implement the root
                <xosid:token>FileQuery</xosid:token> interface. This
                method must be used to retrieve a query object
                implementing the interface specified when retrieving
                this object from the search session along with all of
                its ancestor interfaces, including the core
                <xosid:token>FileQuery</xosid:token> interface.
                Multiple retrievals of this interface may return the
                same underlying object and do not result in adding
                terms to the query.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileQuery"/>
                <xosid:description>
                    the query interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileSearch"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntrySearch"/>
        <xosid:description>
            The search interface for governing file searches.
        </xosid:description>


        <xosid:method xosid:name="searchWithinFileResults">
            <xosid:description>
                Execute this search using a previous search result.
            </xosid:description>
            <xosid:parameter xosid:name="results">
                <xosid:interfaceType xosid:type="osid.filing.FileSearchResults"/>
                <xosid:description>
                    results from a query
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>results</xosid:token> is not valid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>results</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="searchAmongFiles">
            <xosid:description>
                Execute this search among the given list of files.
            </xosid:description>
            <xosid:parameter xosid:name="files">
                <xosid:primitiveType xosid:type="string" xosid:array="true"/>
                <xosid:description>
                    list of files
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>files</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="orderBySize">
            <xosid:description>
                Specifies a preference for ordering the results by file
                size.
            </xosid:description>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchInterface">
            <xosid:description>
                Gets the typed interface for this search. The interface
                returned must match the query interface type specified
                when retrieving this query interface, or any ancestor
                of the supplied query interface type. The root
                interface is this <xosid:token>FileSearch</xosid:token>
                itself. The returned interface should be treated as an
                extension of this interface and as such multiple calls
                to this method may return the same underlying object.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearch"/>
                <xosid:description>
                    the file search interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileSearchResults"> 
        <xosid:implements xosid:interface="osid.OsidSearchResults"/>
        <xosid:description>
            This interface provides a means to capture results of a
            search and is used as a vehicle to perform a search within
            a previous result set.
        </xosid:description>


        <xosid:method xosid:name="getFiles">
            <xosid:description>
                Gets the file list resulting from a search.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileList"/>
                <xosid:description>
                    the directory list
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileSearchResultsExtension">
            <xosid:description>
                Gets the file search results interface corresponding to
                the <xosid:token>searchType</xosid:token> used in
                retrieving the <xosid:token>FileSearch</xosid:token>
                interface. A
                <xosid:token>FileSearchResults</xosid:token> returned
                from the search session is only required to implement
                the root <xosid:token>FileSearchResults</xosid:token>
                interface. This method must be used to retrieve a
                search results object implementing the interface
                specified when retrieving the
                <xosid:token>FileSearch</xosid:token> from the search
                session along with all of its ancestor interfaces,
                including the core
                <xosid:token>FileSearchResults</xosid:token> interface.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileSearchResults"/>
                <xosid:description>
                    the file results extension
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileForm"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntryForm"/>
        <xosid:description>
            <xosid:token>File</xosid:token> represents a file in a file
            system.
        </xosid:description>


        <xosid:method xosid:name="getFileFormInterface">
            <xosid:description>
                Gets the <xosid:token>FileForm</xosid:token> interface
                corresponding to the <xosid:token>File</xosid:token>
                interface <xosid:token>Type</xosid:token> provided in
                the admin session<xosid:token>. </xosid:token>A
                <xosid:token>FileForm</xosid:token> returned from the
                admin session is only required to implement the root
                <xosid:token>FileForm</xosid:token> interface. This
                method must be used to retrieve a query object
                implementing the interface specified when retrieving
                this object from the admin session along with all of
                its ancestor interfaces, including the core
                <xosid:token>FileForm</xosid:token> interface.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileForm"/>
                <xosid:description>
                    the filing form interfcace
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileReceiver"> 
        <xosid:implements xosid:interface="osid.OsidReceiver"/>
        <xosid:description>
            The file receiver is the consumer supplied interface for
            receiving notifications pertaining to new, updated or
            deleted files.
        </xosid:description>


        <xosid:method xosid:name="newFile">
            <xosid:description>
                The callback for notifications of new files.
            </xosid:description>
            <xosid:parameter xosid:name="filePath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the new file
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="changedFile">
            <xosid:description>
                The callback for notification of updated files.
            </xosid:description>
            <xosid:parameter xosid:name="filePath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the changed file
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="deletedFile">
            <xosid:description>
                the callback for notification of deleted files.
            </xosid:description>
            <xosid:parameter xosid:name="filePath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the deleted file
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.FileList"> 
        <xosid:implements xosid:interface="osid.OsidList"/>
        <xosid:description>
            Like all <xosid:token>OsidLists,</xosid:token>
            <xosid:token>FileList</xosid:token> provides a means for
            accessing <xosid:token>File</xosid:token> elements
            sequentially either one at a time or many at a time. Examples:

            <xosid:pbreak/>

             <xosid:code>
while (el.hasNext()) {
     Entry entry = el.getNextEntry();
}


            </xosid:code>
             or
            <xosid:code>


while (el.hasNext()) {
     Entry[] entries = e
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="getNextFile">
            <xosid:description>
                Gets the next <xosid:token>File</xosid:token> in this
                list.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File"/>
                <xosid:description>
                    the next <xosid:token>File</xosid:token> in this
                    list. The <xosid:token>hasNext()</xosid:token>
                    method should be used to test that a next
                    <xosid:token>File</xosid:token> is available
                    before calling this method.
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    no more elements available in this list
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getNextFiles">
            <xosid:description>
                Gets the next set of <xosid:token>File</xosid:token>
                elements in this list which must be less than or equal
                to the number returned from
                <xosid:token>available().</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="n">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    the number of <xosid:token>File
                    </xosid:token>elements requested which should be
                    less than or equal to
                    <xosid:token>available()</xosid:token>
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.File" xosid:array="true"/>
                <xosid:description>
                    an array of <xosid:token>File
                   </xosid:token>elements. <xosid:token>
                    </xosid:token>The length of the array is less than
                    or equal to the number specified.
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    no more elements available in this list
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.Directory"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntry"/>
        <xosid:description>
            <xosid:token>Directory</xosid:token> represents a directory
            in a file system that may contain other files and directories.

            <xosid:pbreak/>

            <xosid:token>getDirectoryInterface()</xosid:token> should
            be used to retrieve the interface corresponding to this
            Type. The existence of the interface must not be assumed
            until requested at which point it is safe to cast into the
            interface indicated by the type.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryInterface">
            <xosid:description>
                Gets the <xosid:token>Directory</xosid:token> interface
                corresponding to the given
                <xosid:token>Directory</xosid:token> interface
                <xosid:token>Type. </xosid:token>A
                <xosid:token>Directory</xosid:token> returned from
                another method is only required to implement the root
                <xosid:token>Directory</xosid:token> interface and
                this method must be used to retrieve a directory object
                implementing the requested interface along with all of
                its ancestor interfaces, including the core
                <xosid:token>Directory</xosid:token> interface. The
                <xosid:token>directoryInterfaceType</xosid:token> may
                be the <xosid:token>Type</xosid:token> returned by
                <xosid:token>getInterfaceType()</xosid:token> or any
                parent of <xosid:token>getInterfaceType()</xosid:token>
                in the <xosid:token>Type</xosid:token> hierarchy where
               
                <xosid:token>implementsInterfaceType(directoryInterfaceType)</xosid:token>
                is <xosid:token>true</xosid:token>.
            </xosid:description>
            <xosid:parameter xosid:name="directoryInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    the directory interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the typed interface
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directoryInterfaceType</xosid:token>
                    is <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="PERMISSION_DENIED" xosid:category="User">
                <xosid:description>
                    authorization failure occurred
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>implementsInterfaceType(directoryInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryQuery"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntryQuery"/>
        <xosid:description>
            This is the query interface for searching directories. Each
            method match request produces an
            <xosid:token>AND</xosid:token> term while multiple
            invocations of a method produces a nested
            <xosid:token>OR,</xosid:token> except for accessing the
            <xosid:token>DirectoryQuery</xosid:token> subinterface.
            An example to find directories whose name is "Library".

            <xosid:pbreak/>

             <xosid:code>
DirectoryQuery queries[1];
queries[0] = session.getDirectoryQuery();
queries[0].matchName("Library", wordStringMatchType, true);

DirectoryList list = session.getDirectoriesByQuery(queries);
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="supportsFileQuery">
            <xosid:description>
                Tests if a <xosid:token>FileQuery</xosid:token> is
                available.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> if a file query
                    interface is available,
                    <xosid:token>false</xosid:token> otherwise
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileQuery">
            <xosid:description>
                Gets the query interface for a file contained within
                the directory.
            </xosid:description>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for a
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.FileQuery"/>
                <xosid:description>
                    the directory query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportsFileQuery()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileQuery()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getFileQueryForInterfaceType">
            <xosid:description>
                Gets the file query interface for the file type.
                Supported types are defined in the
                <xosid:token>FilingManager.</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="fileInterfaceType">
                <xosid:interfaceType xosid:type="osid.type.Type"/>
                <xosid:description>
                    a file interface type
                </xosid:description>
            </xosid:parameter>
            <xosid:parameter xosid:name="match">
                <xosid:primitiveType xosid:type="boolean"/>
                <xosid:description>
                    <xosid:token>true</xosid:token> for a positive
                    match, <xosid:token>false</xosid:token> for
                    negative match
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the file query
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>fileInterfaceType</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNIMPLEMENTED" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>supportFileQuery()</xosid:token> is
                    <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="UNSUPPORTED" xosid:category="Integration">
                <xosid:description>

                                        <xosid:token>FilingManager.supportsFileInterfaceType(fileInterfaceType)</xosid:token>
                    is <xosid:token>false</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="optional">
                <xosid:description>
                    This method must be implemented if
                    <xosid:token>supportsFileQuery()</xosid:token> is
                    <xosid:token>true.</xosid:token>
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectoryQueryInterface">
            <xosid:description>
                Gets the <xosid:token>DirectoryQuery</xosid:token>
                interface corresponding to the
                <xosid:token>Directory</xosid:token> interface
                <xosid:token>Type</xosid:token> provided in the serch
               session. <xosid:token> </xosid:token>A
                <xosid:token>DirectoryQuery</xosid:token> returned
                from the search session is only required to implement
                the root <xosid:token>DirectoryQuery</xosid:token>
                interface. This method must be used to retrieve a query
                object implementing the interface specified when
                retrieving this object from the search session along
                with all of its ancestor interfaces, including the core
                <xosid:token>DirectoryQuery</xosid:token> interface.
                Multiple retrievals of this interface may return the
                same underlying object and do not result in adding
                terms to the query.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryQuery"/>
                <xosid:description>
                    the directory query interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectorySearch"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntrySearch"/>
        <xosid:description>
            The search interface for gioverning directory searches.
            An example to find directories whose name is "Library"
            sorted by the path name.

            <xosid:pbreak/>

             <xosid:code>
DirectoryQuery queries[1];
queries[0] = session.getDirectoryQuery();
queries[0].addNameMatch("Library", wordStringMatchType, true);

DirectorySearch search = session.getDirectorySearch();
search.orderByPath();

DirectorySearchResults results = session.getDirectoriesBySearch(queries, search);
DirectoryList directories = results.getDirectories();
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="searchWithinDirectoryResults">
            <xosid:description>
                Execute this search using a previous search result.
            </xosid:description>
            <xosid:parameter xosid:name="results">
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchResults"/>
                <xosid:description>
                    results from a query
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="INVALID_ARGUMENT" xosid:category="Integration">
                <xosid:description>
                    <xosid:token>results</xosid:token> is not valid
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>results</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="searchAmongDirectories">
            <xosid:description>
                Execute this search among the given list of diectories.
            </xosid:description>
            <xosid:parameter xosid:name="directories">
                <xosid:primitiveType xosid:type="string" xosid:array="true"/>
                <xosid:description>
                    list of directories
                </xosid:description>
            </xosid:parameter>
            <xosid:error xosid:type="NULL_ARGUMENT" xosid:category="Programming">
                <xosid:description>
                    <xosid:token>directories</xosid:token> is
                    <xosid:token>null</xosid:token>
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchInterface">
            <xosid:description>
                Gets the <xosid:token>DirectorySearch</xosid:token>
                interface corresponding to the directory search
                interface <xosid:token>Type</xosid:token> provided in
                the search session<xosid:token>. </xosid:token>A
                <xosid:token>DirectorySearch</xosid:token> returned
                from the search session is only required to implement
                the root <xosid:token>DirectorySearch</xosid:token>
                interface. This method must be used to retrieve a query
                object implementing the interface specified when
                retrieving this object from the search session along
                with all of its ancestor interfaces, including the core
                <xosid:token>DirectorySearch</xosid:token> interface.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearch"/>
                <xosid:description>
                    the directory search interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectorySearchResults"> 
        <xosid:implements xosid:interface="osid.OsidSearchResults"/>
        <xosid:description>
            This interface provides a means to capture results of a
            search and is used as a vehicle to perform a search within
            a previous result set. This example gets a result set from
            a keyword match.
            An example to find directories whose path contains "System"
            from a resulting search of directories whose name is
            "Library", sorted by the path name.

            <xosid:pbreak/>

             <xosid:code>
DirectoryQuery queries[1];
queries[0] = session.getDirectoryQuery();
queries[0].addNameMatch("Library", wordStringMatchType, true);

DirectorySearch search = session.getDirectorySearch();
DirectorySearchResults results = session.getDirectoriesBySearch(queries, search);

queries[0] = session.getDirectoryQuery();
queries[0].addNameMatch("System", wordStringMatchType, true);

search = session.getDirectorySearch();
search.searchWithinDirectoryResults(results);
search.orderByPath();

results = session.getDirectoriesBySearch(queries, search);
DirectoryList directories = results.getDirectories();
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="getDirectories">
            <xosid:description>
                Gets the directory list resulting from a search.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryList"/>
                <xosid:description>
                    the directory list
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectorySearchResultsInterface">
            <xosid:description>
                Gets the directory results interface corresponding to
                the <xosid:token>searchType</xosid:token> used in
                retrieving the
                <xosid:token>DirectorySearch</xosid:token> interface. A
                <xosid:token>DirectorySearchResults</xosid:token>
                returned from the search session is only required to
                implement the root
                <xosid:token>DirectorySearchResults</xosid:token>
                interface. This method must be used to retrieve a
                search results object implementing the interface
                specified when retrieving the
                <xosid:token>DirectorySearch</xosid:token> from the
                search session along with all of its ancestor
                interfaces, including the core
                <xosid:token>DirectorySearchResults</xosid:token>
                interface.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectorySearchResults"/>
                <xosid:description>
                    the directory results interface
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryForm"> 
        <xosid:implements xosid:interface="osid.filing.DirectoryEntryForm"/>
        <xosid:description>
            <xosid:token>File</xosid:token> represents a file in a file
            system.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryFormInterface">
            <xosid:description>
                Gets the <xosid:token>DirectoryForm</xosid:token>
                interface corresponding to the
                <xosid:token>Directory</xosid:token> interface
                <xosid:token>Type</xosid:token> provided in the admin
               session <xosid:token>. </xosid:token>A
                <xosid:token>DirectoryForm</xosid:token> returned from
                the admin session is only required to implement the
                root <xosid:token>DirectoryForm</xosid:token>
                interface. This method must be used to retrieve a query
                object implementing the interface specified when
                retrieving this object from the admin session along
                with all of its ancestor interfaces, including the core
                <xosid:token>DirectoryForm</xosid:token> interface.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.DirectoryForm"/>
                <xosid:description>
                    the directory form interfcace
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryReceiver"> 
        <xosid:implements xosid:interface="osid.OsidReceiver"/>
        <xosid:description>
            The directory receiver is the consumer supplied interface
            for receiving notifications pertaining to new, updated or
            deleted directories.
            An example showing how to receive notifications of new
            directories created under a user's home directory.

            <xosid:pbreak/>

             <xosid:code>
class myReceiver {
    void newDirectory(string path) {
        print "new directory created: " + path;
    }

    void changedDirectory(string path) {}
    void deletedDirectory(string path) {}
    void up() {}
    void down() {}
}

notificationSession = manager.getDirectoryNotificationSessionForDirectory(myReceiver, "/Users/tom");
notificationSession.useFederatedDirectoryView();
notificationSession.registerForNewDirectories();
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="newDirectories">
            <xosid:description>
                The callback for notifications of new directories.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the new directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="changedDirectory">
            <xosid:description>
                The callback for notification of updated directories.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the changed directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="deletedDirectories">
            <xosid:description>
                the callback for notification of deleted files.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the deleted directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.DirectoryList"> 
        <xosid:implements xosid:interface="osid.OsidList"/>
        <xosid:description>
            Like all <xosid:token>OsidLists,</xosid:token>
            <xosid:token>DirectoryList</xosid:token> provides a means
            for accessing <xosid:token>Directory</xosid:token> elements
            sequentially either one at a time or many at a time. Examples:

            <xosid:pbreak/>

             <xosid:code>
while (el.hasNext()) {
     Entry entry = el.getNextEntry();
}


            </xosid:code>
             or
            <xosid:code>


while (el.hasNext()) {
     Entry[] entries = e
            </xosid:code>
             
        </xosid:description>


        <xosid:method xosid:name="getNextDirectory">
            <xosid:description>
                Gets the next <xosid:token>Directory</xosid:token> in
                this list.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                    the next <xosid:token>Directory</xosid:token> in
                    this list. The <xosid:token>hasNext()</xosid:token>
                    method should be used to test that a next
                    <xosid:token>Dircectory</xosid:token> is available
                    before calling this method.
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    no more elements available in this list
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getNextDirectories">
            <xosid:description>
                Gets the next set of
                <xosid:token>Directory</xosid:token> elements in this
                list which must be less than or equal to the number
                returned from <xosid:token>available().</xosid:token>
            </xosid:description>
            <xosid:parameter xosid:name="n">
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    the number of <xosid:token>Directory
                    </xosid:token>elements requested which should be
                    less than or equal to
                    <xosid:token>available()</xosid:token>
                </xosid:description>
            </xosid:parameter>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory" xosid:array="true"/>
                <xosid:description>
                    an array of <xosid:token>Directory
                   </xosid:token>elements. <xosid:token>
                    </xosid:token>The length of the array is less than
                    or equal to the number specified.
                </xosid:description>
            </xosid:return>
            <xosid:error xosid:type="ILLEGAL_STATE" xosid:category="Programming">
                <xosid:description>
                    no more elements available in this list
                </xosid:description>
            </xosid:error>
            <xosid:error xosid:type="OPERATION_FAILED" xosid:category="Operational">
                <xosid:description>
                    unable to complete request
                </xosid:description>
            </xosid:error>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.Allocation"> 
        <xosid:implements xosid:interface=""/>
        <xosid:description>
            <xosid:token>Directory</xosid:token> represents a directory
            in a file system that may contain other files and
            directories.
        </xosid:description>


        <xosid:method xosid:name="getDirectoryPath">
            <xosid:description>
                Gets the absolute path to the directory responsible for
                these usage stats. The return may be a partition or
                volume containing the requested directory.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    path name
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getDirectory">
            <xosid:description>
                Gets the directory responsible for these usage stats.
                The return may be a partition, quota controlled
                directory, or volume containing the requested
                directory.
            </xosid:description>
            <xosid:return>
                <xosid:interfaceType xosid:type="osid.filing.Directory"/>
                <xosid:description>
                     directory
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getTotalSpace">
            <xosid:description>
                Gets the total space in bytes of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of bytes in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getUsedSpace">
            <xosid:description>
                Gets the used space in bytes of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of used bytes in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAvailableSpace">
            <xosid:description>
                Gets the available space in bytes of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of available bytes in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getTotalFiles">
            <xosid:description>
                Gets the total number of files of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of files in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getUsedFiles">
            <xosid:description>
                Gets the used number of files of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of used files in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="getAvailableFiles">
            <xosid:description>
                Gets the available number o files of this allocation.
            </xosid:description>
            <xosid:return>
                <xosid:primitiveType xosid:type="cardinal"/>
                <xosid:description>
                    number of available files in this allocation
                </xosid:description>
            </xosid:return>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>


    <xosid:interface xosid:name="osid.filing.AllocationReceiver"> 
        <xosid:implements xosid:interface="osid.OsidReceiver"/>
        <xosid:description>
            The allocation receiver is the consumer supplied interface
            for receiving notifications pertaining to usage warnings
            and changed quota assignments.
        </xosid:description>


        <xosid:method xosid:name="warning">
            <xosid:description>
                The callback for notifications of usage warnings.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="clearWarning">
            <xosid:description>
                The callback for notification of cleared usage
                warnings.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>

        <xosid:method xosid:name="changedQuota">
            <xosid:description>
                the callback for notification of a new, removed or
                changed quota assignment.
            </xosid:description>
            <xosid:parameter xosid:name="directoryPath">
                <xosid:primitiveType xosid:type="string"/>
                <xosid:description>
                    absolute pathname to the directory
                </xosid:description>
            </xosid:parameter>
            <xosid:compliance xosid:type="mandatory">
                <xosid:description>
                    This method must be implemented.
                </xosid:description>
            </xosid:compliance>
        </xosid:method>
    </xosid:interface>

</xosid:osid>
